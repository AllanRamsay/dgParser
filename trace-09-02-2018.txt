SICStus 3.12.8 (i386-darwin-8.9.1): Tue May  8 13:13:57 CEST 2007
Licensed to man.ac.uk
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/setup.pl...
%  loading /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/charsio.po...
%  module charsio imported into user
%   loading foreign resource /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/i386-darwin-8.9.1/charsio.bundle in module charsio
%  loaded /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/charsio.po in module charsio, 0 msec 8512 bytes
% consulted /Users/ramsay/Documents/GitHub/dgParser/setup.pl in module user, 0 msec 11544 bytes
yes
| ?- setup(englishopen).
% compiling /Users/ramsay/Documents/GitHub/dgParser/useful.pl...
%  loading /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/terms.po...
%  module terms imported into user
%   loading /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/assoc.po...
%   module assoc imported into terms
%    loading /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/lists.po...
%    module lists imported into assoc
%    loaded /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/lists.po in module lists, 0 msec 11328 bytes
%   loaded /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/assoc.po in module assoc, 0 msec 22728 bytes
%  loaded /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/terms.po in module terms, 0 msec 31128 bytes
% Undefined predicates will just fail (fail)
% compiled /Users/ramsay/Documents/GitHub/dgParser/useful.pl in module user, 10 msec 59088 bytes
% compiling /Users/ramsay/Documents/GitHub/dgParser/features.pl...
% compiled /Users/ramsay/Documents/GitHub/dgParser/features.pl in module user, 20 msec 21620 bytes
% compiling /Users/ramsay/Documents/GitHub/dgParser/pretty.pl...
% compiled /Users/ramsay/Documents/GitHub/dgParser/pretty.pl in module user, 10 msec 12048 bytes
% compiling /Users/ramsay/Documents/GitHub/dgParser/io.pl...
% compiled /Users/ramsay/Documents/GitHub/dgParser/io.pl in module user, 0 msec 1752 bytes
% compiling /Users/ramsay/Documents/GitHub/dgParser/disjoin.pl...
% compiled /Users/ramsay/Documents/GitHub/dgParser/disjoin.pl in module user, 10 msec 16496 bytes
% compiling /Users/ramsay/Documents/GitHub/dgParser/client.pl...
%  loading /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/sockets.po...
%  module sockets imported into user
%   loading foreign resource /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/i386-darwin-8.9.1/sockets.bundle in module sockets
%  loaded /usr/local/bin/sp-3.12.8/sicstus-3.12.8/library/sockets.po in module sockets, 0 msec 21776 bytes
% compiled /Users/ramsay/Documents/GitHub/dgParser/client.pl in module user, 0 msec 23296 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/signatures.pl...
* clauses for user:(signature/1) are not together
* Approximate lines: 5-7, file: '/Users/ramsay/Documents/GitHub/dgParser/signatures.pl'
% consulted /Users/ramsay/Documents/GitHub/dgParser/signatures.pl in module user, 0 msec 8976 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/agree.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/agree.pl in module user, 10 msec 6488 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/classes.pl...
* clauses for user:(aux/2) are not together
* Approximate lines: 796-824, file: '/Users/ramsay/Documents/GitHub/dgParser/classes.pl'
% consulted /Users/ramsay/Documents/GitHub/dgParser/classes.pl in module user, 40 msec 186328 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/negation.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/negation.pl in module user, 0 msec 1448 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/vforms.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/vforms.pl in module user, 10 msec 28080 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/pronouns.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/pronouns.pl in module user, 0 msec 1336 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/verbs.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/verbs.pl in module user, 0 msec 35800 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/mclasses.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/mclasses.pl in module user, 0 msec 1648 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/determiners.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/determiners.pl in module user, 10 msec 24256 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/miscellany.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/miscellany.pl in module user, 0 msec 12304 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/nouns.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nouns.pl in module user, 0 msec 1944 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/lookup.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/lookup.pl in module user, 0 msec 10736 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/chart.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/chart.pl in module user, 20 msec 72912 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/treepr.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/treepr.pl in module user, 0 msec 10096 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/conll.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/conll.pl in module user, 0 msec 7056 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/parseconstrained.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/parseconstrained.pl in module user, 0 msec 6120 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/preprocess.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/preprocess.pl in module user, 10 msec 12520 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec 25552 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/spelling.pl...
* abolish(user:(spellingRule/3)) - no matching predicate
* Approximate lines: 113-115, file: '/Users/ramsay/Documents/GitHub/dgParser/spelling.pl'
% consulted /Users/ramsay/Documents/GitHub/dgParser/spelling.pl in module user, 0 msec 13072 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/pstree.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/pstree.pl in module user, 0 msec 5016 bytes
% consulting /Users/ramsay/Documents/GitHub/dgParser/englishopen.pl...
%  including /Users/ramsay/Documents/GitHub/dgParser/englishclosed.pl...
%   including /Users/ramsay/Documents/GitHub/dgParser/englishaffixes.pl...
%   included /Users/ramsay/Documents/GitHub/dgParser/englishaffixes.pl in module user, 0 msec 15176 bytes
%  included /Users/ramsay/Documents/GitHub/dgParser/englishclosed.pl in module user, 40 msec 511720 bytes
% consulted /Users/ramsay/Documents/GitHub/dgParser/englishopen.pl in module user, 100 msec 1082816 bytes
yes
| ?- parseOne('John have been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John has been eating every peach.}}\label{NF: John has been eating every peach.}
\end{figure}
no
| ?- parseOne('John have been eating a peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John have been eating every peach.}}\label{NF: John have been eating every peach.}
\end{figure}
no
| ?- parseOne('John have been eating peaches.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John have been eating a peach.}}\label{NF: John have been eating a peach.}
\end{figure}
no
| ?- parseOne('John have been eating peaches.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John have been eating peaches.}}\label{NF: John have been eating peaches.}
\end{figure}
no
| ?- spy(convSteps).
* spy user:convSteps - no matching predicate
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec 4808 bytes
yes
| ?- parseOne('John have been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John have been eating peaches.}}\label{NF: John have been eating peaches.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(A), aux(+), def(+), finite(tensed))),
      [have>,
       arg(B,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(C),
                  finite(participle))),
           [[be]>en,
            arg(D,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(E),
                       finite(participle))),
                [[eat>ing, arg(dobj, *(generic), peach>plural)],
                 arg(subject, *(name), [John:NP])])])])]
  + [.,
     arg(claim,
         *([time(tense(past),
                 aspect(perfect),
                 aux(+),
                 def(C),
                 finite(participle))]),
         [eat,
          arg(dobj, *(generic), peach>plural),
          arg(subject, *(name), [John:NP])])])
X = ['.',arg(claim,*time(tense(present),aspect(_A),aux(+),def(+),finite(tensed)),[have>'',arg(_B,*time(tense(past),aspect(perfect),aux(+),def(_C),finite(participle)),[[be]>en,arg(_D,*time(tense(present),aspect(prog),aux(-),def(_E),finite(participle)),[[eat>ing,arg(dobj,*generic,peach>plural)],arg(subject,*name,['John':'NP'])])])])],
XP = ['.',arg(claim,*[time(tense(past),aspect(perfect),aux(+),def(_C),finite(participle))],[eat,arg(dobj,*generic,peach>plural),arg(subject,*name,['John':'NP'])])] ? 
yes
| ?- parseOne('John has been eating peaches.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John have been eating every peach.}}\label{NF: John have been eating every peach.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(A), aux(+), def(+), finite(tensed))),
      [have>,
       arg(B,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(C),
                  finite(participle))),
           [[be]>en,
            arg(D,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(E),
                       finite(participle))),
                [[eat>ing,
                  arg(dobj,
                      *(universal),
                      [peach>singular, modifier(identity, every)])],
                 arg(subject, *(name), [John:NP])])])])]
  + [.,
     arg(claim,
         *([time(tense(past),
                 aspect(perfect),
                 aux(+),
                 def(C),
                 finite(participle))]),
         [eat,
          arg(dobj, *(universal), [peach>singular]),
          arg(subject, *(name), [John:NP])])])
X = ['.',arg(claim,*time(tense(present),aspect(_A),aux(+),def(+),finite(tensed)),[have>'',arg(_B,*time(tense(past),aspect(perfect),aux(+),def(_C),finite(participle)),[[be]>en,arg(_D,*time(tense(present),aspect(prog),aux(-),def(_E),finite(participle)),[[eat>ing,arg(dobj,*universal,[peach>singular|...])],arg(subject,*name,['John':'NP'])])])])],
XP = ['.',arg(claim,*[time(tense(past),aspect(perfect),aux(+),def(_C),finite(participle))],[eat,arg(dobj,*universal,[peach>singular]),arg(subject,*name,['John':'NP'])])] ? 
yes
| ?- parseOne('John has been eating peaches.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John has been eating peaches.}}\label{NF: John has been eating peaches.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(simple), aux(+), def(+), finite(tensed))),
      [has,
       arg(A,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(B),
                  finite(participle))),
           [[be]>en,
            arg(C,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(D),
                       finite(participle))),
                [[eat>ing, arg(dobj, *(generic), peach>plural)],
                 arg(subject, *(name), [John:NP])])])])]
  + [.,
     arg(claim,
         *([time(tense(past),
                 aspect(perfect),
                 aux(+),
                 def(B),
                 finite(participle))]),
         [eat,
          arg(dobj, *(generic), peach>plural),
          arg(subject, *(name), [John:NP])])])
X = ['.',arg(claim,*time(tense(present),aspect(simple),aux(+),def(+),finite(tensed)),[has,arg(_A,*time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle)),[[be]>en,arg(_C,*time(tense(present),aspect(prog),aux(-),def(_D),finite(participle)),[[eat>ing,arg(dobj,*generic,peach>plural)],arg(subject,*name,['John':'NP'])])])])],
XP = ['.',arg(claim,*[time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle))],[eat,arg(dobj,*generic,peach>plural),arg(subject,*name,['John':'NP'])])] ? 
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
! Syntax error
! , or ) expected in arguments
! in line 210
! qlf ( arg ( claim , * SPEC , X0 ) , claim ( opaque ( at ( qq ( SPEC , { X1 , V } , V ) ) ) ) 
! <<here>>
! :- ! , qlf ( X0 , X1 ) . 
! Approximate lines: 209-213, file: '/Users/ramsay/Documents/GitHub/dgParser/nf.pl'
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec -976 bytes
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec -184 bytes
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec -32 bytes
yes
| ?- parseOne('a man has been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{John has been eating peaches.}}\label{NF: John has been eating peaches.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(simple), aux(+), def(+), finite(tensed))),
      [has,
       arg(A,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(B),
                  finite(participle))),
           [[be]>en,
            arg(C,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(D),
                       finite(participle))),
                [[eat>ing, arg(dobj, *(generic), peach>plural)],
                 arg(subject, *(name), [John:NP])])])])]
  + claim(opaque(at(qq([time(tense(past),
                             aspect(perfect),
                             aux(+),
                             def(B),
                             finite(participle))],
                       {([eat,
                           qq(generic::{peach>plural,E},
                              {dobj,E}),
                           qq(name::{[John:NP],F},
                              {subject,F})],
                          G)},
                       G)))))
X = ['.',arg(claim,*time(tense(present),aspect(simple),aux(+),def(+),finite(tensed)),[has,arg(_A,*time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle)),[[be]>en,arg(_C,*time(tense(present),aspect(prog),aux(-),def(_D),finite(participle)),[[eat>ing,arg(dobj,*generic,peach>plural)],arg(subject,*name,['John':'NP'])])])])],
XP = claim(opaque(at(qq([time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle))],{[eat,qq(generic::{peach>plural,_E},{dobj,_E}),qq(name::{['John':'NP'],_F},{subject,_F})],_G},_G)))) ? 
yes
| ?- parseOne('a man has been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{a man has been eating every peach.}}\label{NF: a man has been eating every peach.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(simple), aux(+), def(+), finite(tensed))),
      [has,
       arg(A,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(B),
                  finite(participle))),
           [[be]>en,
            arg(C,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(D),
                       finite(participle))),
                [[eat>ing,
                  arg(dobj,
                      *(universal),
                      [peach>singular, modifier(identity, every)])],
                 arg(subject,
                     *(indefinite),
                     [man>singular, modifier(identity, a)])])])])]
  + claim(opaque(at(qq([time(tense(past),
                             aspect(perfect),
                             aux(+),
                             def(B),
                             finite(participle))::G],
                       {([eat,
                           qq(universal::{[peach>singular],E},
                              {dobj,E}),
                           qq(indefinite::{[man>singular],F},
                              {subject,F})],
                          G)})))))
X = ['.',arg(claim,*time(tense(present),aspect(simple),aux(+),def(+),finite(tensed)),[has,arg(_A,*time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle)),[[be]>en,arg(_C,*time(tense(present),aspect(prog),aux(-),def(_D),finite(participle)),[[eat>ing,arg(dobj,*universal,[peach>singular|...])],arg(subject,*indefinite,[man>singular,modifier(...)])])])])],
XP = claim(opaque(at(qq([time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle))],{[eat,qq(universal::{[peach>singular],_E},{dobj,_E}),qq(indefinite::{[man>singular],_F},{subject,_F})],_G},_G)))) ? 
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec -72 bytes
yes
| ?- parseOne('a man has been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{a man has been eating every peach.}}\label{NF: a man has been eating every peach.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(simple), aux(+), def(+), finite(tensed))),
      [has,
       arg(A,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(B),
                  finite(participle))),
           [[be]>en,
            arg(C,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(D),
                       finite(participle))),
                [[eat>ing,
                  arg(dobj,
                      *(universal),
                      [peach>singular, modifier(identity, every)])],
                 arg(subject,
                     *(indefinite),
                     [man>singular, modifier(identity, a)])])])])]
  + claim(opaque(at(qq(([time(tense(past),
                              aspect(perfect),
                              aux(+),
                              def(B),
                              finite(participle))]
                         :: {([eat,
                                qq(universal::{[peach>singular],E},
                                   {dobj,E}),
                                qq(indefinite::{[man>singular],F},
                                   {subject,F})],
                               G)}),
                       G)))))
X = ['.',arg(claim,*time(tense(present),aspect(simple),aux(+),def(+),finite(tensed)),[has,arg(_A,*time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle)),[[be]>en,arg(_C,*time(tense(present),aspect(prog),aux(-),def(_D),finite(participle)),[[eat>ing,arg(dobj,*universal,[peach>singular|...])],arg(subject,*indefinite,[man>singular,modifier(...)])])])])],
XP = claim(opaque(at(qq([time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle))]::{[eat,qq(universal::{[peach>singular],_E},{dobj,_E}),qq(...)],_G},_G)))) ? 
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec -24 bytes
yes
| ?- parseOne('a man has been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{a man has been eating every peach.}}\label{NF: a man has been eating every peach.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(simple), aux(+), def(+), finite(tensed))),
      [has,
       arg(A,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(B),
                  finite(participle))),
           [[be]>en,
            arg(C,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(D),
                       finite(participle))),
                [[eat>ing,
                  arg(dobj,
                      *(universal),
                      [peach>singular, modifier(identity, every)])],
                 arg(subject,
                     *(indefinite),
                     [man>singular, modifier(identity, a)])])])])]
  + claim(opaque(at(qq(([time(tense(past),
                              aspect(perfect),
                              aux(+),
                              def(B),
                              finite(participle))]
                         :: {(qq((existential
                                    :: {([eat,
                                           qq((universal
                                                :: {[peach>singular],E}),
                                              {dobj,E}),
                                           qq((indefinite
                                                :: {[man>singular],F}),
                                              {subject,F})],
                                          G)}),
                                  {identity,G}),
                               H)}),
                       H)))))
X = ['.',arg(claim,*time(tense(present),aspect(simple),aux(+),def(+),finite(tensed)),[has,arg(_A,*time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle)),[[be]>en,arg(_C,*time(tense(present),aspect(prog),aux(-),def(_D),finite(participle)),[[eat>ing,arg(dobj,*universal,[peach>singular|...])],arg(subject,*indefinite,[man>singular,modifier(...)])])])])],
XP = claim(opaque(at(qq([time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle))]::{qq(existential::{[eat|...],_G},{identity,_G}),_H},_H)))) ? 
yes
| ?- % consulting /Users/ramsay/Documents/GitHub/dgParser/nf.pl...
% consulted /Users/ramsay/Documents/GitHub/dgParser/nf.pl in module user, 10 msec -88 bytes
yes
| ?- parseOne('a man has been eating every peach.',X),convSteps(X,XP),pretty(X+XP).

\begin{figure}[ht]
\hspace*{\fill}\begin{minipage}[t]{0.45\linewidth}
\begin{verbatim}\hspace*{\fill}
\end{verbatim}
\end{minipage}

\caption{\q{a man has been eating every peach.}}\label{NF: a man has been eating every peach.}
\end{figure}

([.,
  arg(claim,
      *(time(tense(present), aspect(simple), aux(+), def(+), finite(tensed))),
      [has,
       arg(A,
           *(time(tense(past),
                  aspect(perfect),
                  aux(+),
                  def(B),
                  finite(participle))),
           [[be]>en,
            arg(C,
                *(time(tense(present),
                       aspect(prog),
                       aux(-),
                       def(D),
                       finite(participle))),
                [[eat>ing,
                  arg(dobj,
                      *(universal),
                      [peach>singular, modifier(identity, every)])],
                 arg(subject,
                     *(indefinite),
                     [man>singular, modifier(identity, a)])])])])]
claim(opaque(qq(([time(tense(past),
		       aspect(perfect),
		       aux(+),
		       def(B),
		       finite(participle))]
		:: {(qq((existential
			:: {([eat,
			      qq((universal
				 :: {[peach>singular],E}),
				 {dobj,E}),
			      qq((indefinite
				 :: {[man>singular],F}),
				 {subject,F})],
			     G)}),
			{at,G}),
		     H)}),
		H))))
X = ['.',arg(claim,*time(tense(present),aspect(simple),aux(+),def(+),finite(tensed)),[has,arg(_A,*time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle)),[[be]>en,arg(_C,*time(tense(present),aspect(prog),aux(-),def(_D),finite(participle)),[[eat>ing,arg(dobj,*universal,[peach>singular|...])],arg(subject,*indefinite,[man>singular,modifier(...)])])])])],
XP = claim(opaque(qq([time(tense(past),aspect(perfect),aux(+),def(_B),finite(participle))]::{qq(existential::{[eat|...],_G},{at,_G}),_H},_H))) ? 
